import os
import sys

from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import (QApplication, QHBoxLayout, QLabel, QMainWindow,
                             QPushButton, QVBoxLayout, QWidget)


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        # Set up the user interface
        self.init_ui()

    def init_ui(self):
        # Create a label for the input type
        input_label = QLabel('Input Type:')

        # Create radio buttons for the input type options
        self.pgn_button = QPushButton('PGN file')
        self.url_button = QPushButton('URL from chessgames.com')
        self.url_list_button = QPushButton('Text file with URLs from chessgames.com')

        # Create a label for the color
        color_label = QLabel('Color:')

        # Create radio buttons for the color options
        self.white_button = QPushButton('White')
        self.black_button = QPushButton('Black')
        self.both_button = QPushButton('Both')

        # Create a "Help" button
        help_button = QPushButton('Help')
        help_button.clicked.connect(self.show_help)

        # Create an "About" button
        about_button = QPushButton('About')
        about_button.clicked.connect(self.show_about)

        # Create a "Generate" button
        generate_button = QPushButton('Generate')
        generate_button.clicked.connect(self.generate_config)

        # Create a layout for the input type options
        input_layout = QHBoxLayout()
        input_layout.addWidget(input_label)
        input_layout.addWidget(self.pgn_button)
        input_layout.addWidget(self.url_button)
        input_layout.addWidget(self.url_list_button)

        # Create a layout for the color options
        color_layout = QHBoxLayout()
        color_layout.addWidget(color_label)
        color_layout.addWidget(self.white_button)
        color_layout.addWidget(self.black_button)
        color_layout.addWidget(self.both_button)

        # Create a layout for the buttons
        button_layout = QHBoxLayout()
        button_layout.addWidget(help_button)
        button_layout.addWidget(about_button)
        button_layout.addWidget(generate_button)

        # Create a layout for the entire window
        main_layout = QVBoxLayout()
        main_layout.addLayout(input_layout)
        main_layout.addLayout(color_layout)
        main_layout.addLayout(button_layout)

        # Set the layout for the main window
        central_widget = QWidget()
        central_widget.setLayout(main_layout)
        self.setCentralWidget(central_widget)

        # Set the window properties
        self.setWindowTitle('Chess Analysis Tool')
        self.setGeometry(100, 100, 600, 100)


        def show_help(self):
            """Show the help dialog."""
            from PyQt5.QtWidgets import QMessageBox

            message = 'This is the help message for the Chess Analysis Tool.\n\n'
            message += 'To use the tool, select the desired input type and color, then click the "Generate" button to create a configuration file. The tool will then process the input according to the chosen options.\n\n'
            message += 'For more information, visit the tool\'s website: https://example.com'

            QMessageBox.information(self, 'Help', message)
        

        def show_about(self):
            """Show the about dialog."""
            pass  # TODO: Implement this

        
        def generate_config(self):
            """Create a configuration file with the chosen input type and color."""
            input_type = None
            color = None

            # Determine the chosen input type
            if self.pgn_button.isChecked():
                input_type = 'pgn'
            elif self.url_button.isChecked():
                input_type = 'url'
            elif self.url_list_button.isChecked():
                input_type = 'url_list'

            # Determine the chosen color
            if self.white_button.isChecked():
                color = 'white'
            elif self.black_button.isChecked():
                color = 'black'
            elif self.both_button.isChecked():
                color = 'both'

            # Write the configuration to a file
            with open('config.txt', 'w') as f:
                f.write(f'input_type={input_type}\n')
                f.write(f'color={color}\n')

                

       
